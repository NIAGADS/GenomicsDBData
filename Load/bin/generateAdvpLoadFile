#!/usr/bin/env python3
#pylint: disable=invalid-name
#pylint: disable=no-member
'''
Generates load file from ADVP dump
'''


from __future__ import with_statement
from __future__ import print_function

import re
import argparse
import os.path as path
import csv
import json

from GenomicsDBData.Util.utils import warning, die, xstr, is_number, is_non_numeric
from GenomicsDBData.Util.list_utils import qw

def row2value_tuple(fields, row):
    '''
    covert row values to consistently ordered tuple
    '''
    # these two things cause problems later for postgres json
    row = {key : value.replace('"', '') if value is not None else value for key, value in row.items()}
    row = {key : value.replace('|', '-') if value is not None else value for key, value in row.items()}
    row = {key : value.replace('\\x3b', ';') if value is not None else value for key, value in row.items()}
    values = [xstr(row[f], nullStr='NULL') for f in fields] # get rid of quotes in json
    return tuple(values)


def generate_load_file():
    '''
    parse input file and generate load file w/one variant per load file
    extract effect alleles
    '''

    pattern = re.compile(' \(.+\)')

    fileName = path.join(args.dir, args.fileName)
    outputFile = path.join(args.dir, args.fileName + "-preprocess.txt")

    header = qw('marker test_allele frequency pvalue') # position is only valid for GRCh38

    with open(outputFile, 'w', encoding='utf-8') as of:
        with open(fileName, 'r', encoding='latin-1') as f:
            reader = csv.DictReader(f, delimiter='\t')
            fields = reader.fieldnames
            header = header + fields
            print('\t'.join(header), file=of)
            for row in reader:
                try:
                    #warning("DEBUG:", "Record =", row["RecordID"])
                    snp = row['Top SNP']
                    
                    if not snp.startswith('rs') or '+' in snp or 'genotype' in snp:
                        warning("WARNING:", "Skipping Record", row['RecordID'], "-", "invalid Top SNP", snp)
                        continue

                    frequency = row['ReportedAF']
                    if frequency in ['NR', 'NA', 'RA1 is minor allele']: 
                        frequency = 'NULL'
                                           
                    frequency = re.sub(pattern, '', frequency)
                    
                    pvalue = re.sub(pattern, '', row['P-value']) if row['P-value'] != '' else None
                    
                    testAllele = row['RA 1(Reported Allele 1)']
                    if testAllele in ['NA', 'NR']:
                        testAllele = None
                    valuesTuple = row2value_tuple(fields, row)

                    print('\t'.join((snp, xstr(testAllele, nullStr='N'), xstr(frequency, nullStr='NULL'), xstr(pvalue, nullStr='NULL')) +  valuesTuple), file=of)
                except:
                    warning("ERROR Parsing:", row)
                    raise

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="generate load file NHGRI GWAS Catalog tsv file")
    parser.add_argument('-f', '--fileName', help="file name", required=True)
    parser.add_argument('-d', '--dir', help="working directory", required=True)
    parser.add_argument('-g', '--genomeBuild', help="genome build (can match by position only if GRCh38", required=True)

    args = parser.parse_args()

    generate_load_file()


# DATE ADDED TO CATALOG	PUBMEDID	FIRST AUTHOR	DATE	JOURNAL	LINK	STUDY	DISEASE/TRAIT	INITIAL SAMPLE SIZE	REPLICATION SAMPLE SIZE	REGION	CHR_ID	CHR_POS	REPORTED GENE(S)	MAPPED_GENE	UPSTREAM_GENE_ID	DOWNSTREAM_GENE_ID	SNP_GENE_IDS	UPSTREAM_GENE_DISTANCE	DOWNSTREAM_GENE_DISTANCE	STRONGEST SNP-RISK ALLELE	SNPS	MERGED	SNP_ID_CURRENT	CONTEXT	INTERGENIC	RISK ALLELE FREQUENCY	P-VALUE		P-VALUE (TEXT)	OR or BETA	95% CI (TEXT)	PLATFORM [SNPS PASSING QC]	CNV	MAPPED_TRAIT	MAPPED_TRAIT_URI	STUDY ACCESSION
