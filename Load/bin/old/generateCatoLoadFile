#!/usr/bin/env python
#pylint: disable=invalid-name
'''
Generates load file for CATO from download
'''

from __future__ import with_statement
from __future__ import print_function

import argparse
import os.path as path
import csv
import json

from CBILDataCommon.Util.utils import qw, warning, xstr


def generate_load_file():
    '''
    parse input file and generate load file
    '''
    fileName = path.join(args.dir, args.fileName)
    outputFile = path.join(args.dir, "results_seqvariation_CATO.csv")
    count = 0

    with open(outputFile, 'w') as of:
        print('|'.join(fields), file=of)
        with open(fileName) as f:
            reader = csv.DictReader(f, delimiter='\t')
            # chrom	snpChromStart	snpChromEnd	rsid	pred.fit.pctSig	strand	motifname	position	ref.allele	nonref.allele	Cell_types

            for row in reader:
                # chromosome = row['chrom'].replace('chr', '')
                # pos = row['snpChromEnd']  # actual position is snpChromEnd; start = pos - 1
                # ref = row['ref.allele']
                # alt = row['nonref.allele']
                #variantId = xstr(chromosome) + ':' + xstr(pos) + ':' + ref + ':' + alt
                # have to use rsid b/c allele information is outdated
                
                variantId = row['rsid']
                score = row['pred.fit.pctSig']
                cells = row['Cell_types']
                motif = row['motifname']


                line = '|'.join((variantId, xstr(score), 'cato_score_percentile',
                                 json.dumps({'cato_cell_types_affected': cells,
                                             'cato_motif_affected': motif})))


                print(line, file=of)
                
                count = count + 1
                if count % 1000000 == 0:
                    warning("Processed " + xstr(count) + " rows")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="generate CATO load file")
    parser.add_argument('-d', '--dir', help="file directory", required=True)
    parser.add_argument('-f', '--fileName', help="afile name", required=True)

    args = parser.parse_args()

    fields = qw('variant_id score score_type evidence')
    generate_load_file()
