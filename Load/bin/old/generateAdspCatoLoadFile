#!/usr/bin/env python
#pylint: disable=invalid-name
'''
Generates load file from ADSP annotation for CATO
'''

from __future__ import with_statement
from __future__ import print_function

import argparse
import os.path as path
import gzip
import csv
import json

from CBILCommonDataPg.Utils.utils import qw, warning

def parseValue(value):
    '''
    replace null strings with None
    '''
    if value == '-':
        return None
    if value == 'NULL':
        return None
    return value


def xstr(value):
    '''
    replace None with NULL
    otherwise convert to str
    '''
    if value is None:
        return 'NULL'
    else:
        return str(value)


def generate_load_file():
    '''
    parse input file and generate load file
    '''
    fileName = path.join(args.dir, args.fileName)
    outputFile = path.join(args.dir, "results_seqvariation_adsp_cato_" + args.subset + ".csv")
    count = 0
    variants = {}

    with open(outputFile, 'w') as of:
        print('|'.join(fields), file=of)
        with gzip.open(fileName) as f:
            reader = csv.DictReader(f, delimiter='\t')
            for row in reader:
                count = count + 1
                if count % 50000 == 0:
                    warning("Processed " + xstr(count) + " rows")

                variantId = row['seq_meta_var_id']
                if variantId not in variants: # catch duplicates
                    # cato_score_percentile	cato_motif_affected	cato_cell_types_affected
                    score = parseValue(row['cato_score_percentile'])
                    motif = parseValue(row['cato_motif_affected'])
                    cells = parseValue(row['cato_cell_types_affected'])
                    if cells is not None:
                        cells = cells.split(';')

                    if all(v is None for v in (score, motif, cells)):
                        continue

                    line = '|'.join((variantId, xstr(score), 'cato_score_percentile',
                                     json.dumps({'cato_cell_types_affected': cells,
                                                 'cato_motif_affected': motif})))
                    print(line, file=of)
                    variants[variantId] = 1

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="generate ADSP-CATO load file")
    parser.add_argument('-d', '--dir', help="file directory", required=True)
    parser.add_argument('-f', '--fileName', help="adsp annotation file name", required=True)
    parser.add_argument('-s', '--subset', help="adsp subset", required=True)
    args = parser.parse_args()

    fields = qw('variant_id score score_type evidence')
    generate_load_file()
