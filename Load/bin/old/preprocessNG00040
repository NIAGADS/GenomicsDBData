#!/usr/bin/env python
#pylint: disable=invalid-name
#pylint: disable=no-member
#pylint: disable=anomalous-backslash-in-string
'''
preprocesses the NG00040 data file for AD, PSP, or FTD
this includes extracting allele information from Illumina BeadChip
annotation files
'''

from __future__ import with_statement
from __future__ import print_function

import argparse
import os.path as path
import csv
import json
import re
from decimal import Decimal
from itertools import islice

from GenomicsDBData.Util.utils import qw, warning, xstr, die

'''
IlmnID,Name,IlmnStrand,SNP,AddressA_ID,AlleleA_ProbeSeq,AddressB_ID,AlleleB_ProbeSeq,GenomeBuild,Chr,MapInfo,Ploidy,Species,Source,SourceVersion,SourceStrand,SourceSeq,TopGenomicSeq,BeadSetID
exm-IND1-200449980-0_M_R_1990486447,exm-IND1-200449980,MINUS,[D/I],0069606251,CTGTGGAACTTTCCGGAGCTCGGCACCCTTCCCCCAAGCCTACCTGGGCG,,,37.1,1,202183358,diploid,Homo sapiens,1000genomes,0,PLUS,GAGGGCCGCTCAGCGAGGGCGGGACAGAACCTCTCCCGGGCTGGGAGTGCACGGCGCGGT[-/G]CGCCCAGGTAGGCTTGGGGGAAGGGTGCCGAGCTCCGGAAAGTTCCACAGGTCCTCCGCA,GAGGGCCGCTCAGCGAGGGCGGGACAGAACCTCTCCCGGGCTGGGAGTGCACGGCGCGGT[-/G]CGCCCAGGTAGGCTTGGGGGAAGGGTGCCGAGCTCCGGAAAGTTCCACAGGTCCTCCGCA,662
'''


def parse_array_annotation():
    '''
    parse array annotation
    to get mapping of exome probe id to alleles
    '''

    '''
    Name: probe id
    Chr: chromosome
    MapInfo: position
    SNP: [ref/alt]
    '''

    annot = {}
    with open(args.annotationFile) as f:
        reader = csv.DictReader(islice(f, 7, None), delimiter=',') # skip comment headers; first 7 lines
        for row in reader:
            if row['IlmnID'] == '[Controls]':
                break
            probe = row['Name']
            if row['SNP'] is None: # control
                continue
            alleles = row['SNP'].replace('[', '').replace(']', '').split('/')
            if len(alleles) > 2:
                die("multi-alleleic variant: " + probe + ": " + row['SNP'])

            if 'D' in alleles: # insertion/deletion
                # map to refSNP id instead of position, eg.
                # NGCexon10K-rs35823693, or UNGCexon10K-chr18_22805322_rs34182629_6, exm-rs234234
                match = re.search('rs\d+', probe)

                if match:
                    annot[probe] = match.group(0)
                else:
                    annot[probe] = 'indel no refSNP'

            elif 'UNGCexon10K' in probe:
                if 'chr' in probe:
                    # positional info part of probe id, e.g. UNGCexon10K-chrX_99925874_C_T_10
                    values = probe.split('_')
                    chromosome = values[0].replace('UNGCexon10K-chr','')
                    if chromosome == 'MT':
                        chromosome = 'M'
                    annot[probe] = str(chromosome) + ':' + values[1] + ':' + alleles[0] + ':' + alleles[1]
                if 'rs' in probe:
                    match = re.search('rs\d+', probe)
                    annot[probe] = match.group(0)
            else:
                chromosome = row['Chr']
                if chromosome == 'MT':
                    chromosome = 'M'
                annot[probe] = str(chromosome) + ':' + row['MapInfo'] + ':' + alleles[0] + ':' + alleles[1]
            # warning("probe", probe, "variant", annot[probe])

    return annot


def preprocess_data_file():
    '''
    map data to array and output
    '''
    
    fileName = path.basename(args.inputFile);
    outputFile = path.join(args.outputDir,  args.phenotype + '_' + fileName);
    problematicProbeFile = path.join(args.outputDir, 'problematic_probes_' + args.phenotype + '_' + fileName);
    count = 0

    # Variant	Chromosome	hg19 coordinate	AD p-value	AD odds ratio	FTD p-value	FTD odds ratio	PSP p-value	PSP odds ratio
    header = qw('MARKER CHR BP A1 A2 P ODDS_RATIO PROBE')
    with open(outputFile, 'w') as of:
        print('\t'.join(header), sep="\t", file=of)

        with open(problematicProbeFile, 'w') as pf:

            with open(args.inputFile) as f:
                reader = csv.DictReader(f, delimiter='\t')
                reader.fieldnames = [field.strip().lower() for field in reader.fieldnames]

                for row in reader:
                    result = None
                    probe = row['variant']
                    pvalue = xstr(row[args.phenotype.lower() + ' p-value'])
                    oddsRatio = xstr(row[args.phenotype.lower() + ' odds ratio'])

                    if pvalue is None or pvalue == 'NA':
                        print('NO_PVALUE', row, sep='\t', file=pf)
                        continue

                    if probe not in annotation:
                        print('UNMAPPABLE_NOT_IN_ANNOTATION', row, sep="\t", file=pf)
                        # result = [probe, row['chromosome'], row['hg19 coordinate'], xstr(None), xstr(None), pvalue, oddsRatio, probe]

                    elif 'indel' in annotation[probe]:
                        print('UNMAPPABLE_INDEL', row, sep="\t", file=pf)
                        continue

                    marker = annotation[probe]

                    if 'rs' in marker:
                        result = [marker, row['chromosome'], row['hg19 coordinate'], '?', '?', pvalue, oddsRatio, probe]

                    if ':' in marker:
                        c, p, a1, a2 = marker.split(':')
                        result = [marker, c, p, a1, a2, pvalue, oddsRatio, probe]
                        
                    print('\t'.join(result), file=of)

                    count = count + 1


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="generate load file from tab-delimited file of unknown origin")
    parser.add_argument('-d', '--outputDir', help="target directory for output", required=True)
    parser.add_argument('-i', '--inputFile', help="full path to datafile", required=True)
    parser.add_argument('-p', '--phenotype', help="one of AD, FTD, PSP", required=True)
    parser.add_argument('-a', '--annotationFile', help="Illumina BeadChip annotation (csv format); full path",
                        required=True)


    args = parser.parse_args()

    annotation = parse_array_annotation()
    preprocess_data_file()
