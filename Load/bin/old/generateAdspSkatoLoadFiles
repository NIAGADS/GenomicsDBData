#!/usr/bin/env python 
#pylint: disable=invalid-name
'''
Generates load file from ADSP SKATO result (SeqMeta Result)

gene p pmin rho cmaf nmiss nsnps errflag nhw.p nhw.pmin nhw.rho nhw.cmaf nhw.nmiss nhw.nsps nhw.errflag hisp.nhw.p hisp.pmin hisp.rho hisp.cmaf hisp.nmiss hisp.nsps hisp.errflag
'''

from __future__ import with_statement
from __future__ import print_function

import argparse
import os.path as path
import csv

from GenomicsDBData.Util.utils import qw, xstr, warning

POPULATIONS = ['Global', 'NHW', 'Hispanic']
FIELDS = qw('p pmin rho cmaf nmiss nsnps errflag')

def generate_load_files():
    ''' generate load files (expect 3, one for each population '''

    for pop in POPULATIONS:
        outputFile = path.join(args.directory, args.prefix + "_" \
                                   + pop + "_niagads_gene_trait_association.csv")

        columns = FIELDS
        if pop == 'NHW':
            columns = ['nhw.nsps' if x == 'nsnps' else 'nhw.' + x for x in FIELDS]
        if pop == 'Hispanic':
            columns = ['hisp.nsps' if x == 'nsnps' else 'hisp.' + x for x in FIELDS]
            columns = ['hisp.nhw.p' if x == 'p' else x for x in FIELDS]
        with open(outputFile, 'w') as of:
            print('|'.join(header), file=of)
            count = 0
            with open(args.file) as f:
                reader = csv.DictReader(f, delimiter=' ')
                for row in reader:
                    values = [row['gene']]
                    for c in columns:
                        values.append(xstr(row[c]))
                    print('|'.join(values), file=of)
                    count = count + 1

            warning("Processed " + xstr(count) + " lines.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="generates 3 load files from an ADSP SKATO/SeqMeta result file")
    parser.add_argument('-d', '--directory', help="file directory", required=True)
    parser.add_argument('-f', '--file',
                        help="comma separated list of adsp annotation file name", required=True)
    parser.add_argument('-p', '--prefix', help="output file prefix", required=True)

    args = parser.parse_args()

    header = qw('gene_id p_value min_p_value rho cumulative_maf num_missing_snps num_snps error_flag')
    generate_load_files()
