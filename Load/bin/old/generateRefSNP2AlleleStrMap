#!/usr/bin/env python
#pylint: disable=invalid-name
'''
map dbSNP rsIds through UniVariation ids to get
allele strings
'''

from __future__ import print_function
from __future__ import with_statement

from sys import stdout
from os import path
import gzip
import argparse

from CBILCommonDataPg.Utils.utils import warning

def univar_map():
    '''
    initialize map from refSNP property table,
    filtering on taxon_id
    '''
    mapping = {}
    fileName = path.join(args.dir, 'SNP.bcp.gz')
    with gzip.open(fileName, 'r') as f:
        for line in f:
            values = line.rstrip().split('\t')
            if values[6] != args.taxonId:
                continue

            rsId = values[0]
            uniVarId = values[9]
            # warning(uniVarId + " - " + rsId)
            if uniVarId in mapping:
                snps = mapping[uniVarId]
                snps.append(rsId)
                mapping[uniVarId] = snps
            else:
                mapping[uniVarId] = [rsId]

    return mapping


def print_allele_str_map():
    '''
    add allele strings from selected file to annotation map
    '''
    fileName = path.join(args.dir, 'UniVariation.bcp.gz')

    with gzip.open(fileName) as f:
        for line in f:
            values = line.rstrip().split('\t')

            uniVarId = values[0]
            if uniVarId in univar2rsMap:
                ids = univar2rsMap[uniVarId]
                alleleStr = values[1]

                if '(' in alleleStr:
                    warning(ids)
                    warning(alleleStr)

                for rsId in ids:
                    print('\t'.join(('rs' + str(rsId), alleleStr)), file=stdout)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="map rsId to univariation and output as JSON")
    parser.add_argument('-d', '--dir', help="full path to directory storing dbSNP table dumps", required=True)
    parser.add_argument('--taxonId',  help="ncbi taxon id", required=True)
    args = parser.parse_args()

    univar2rsMap = univar_map()
    # die(univar2rsMap)
    print_allele_str_map()
