#!/usr/bin/env python 
#pylint: disable=invalid-name

'''
patch variant gwas to add bin index and ids; necessary to improve querying
'''

from __future__ import with_statement
from __future__ import print_function

# from Bio.Seq import Seq

import argparse
import sys

from collections import OrderedDict
from os import path
from CBILDataCommon.Util.utils import xstr, warning, die
from CBILDataCommon.Util.postgres_dbi import Database

UPDATE_SQL = """UPDATE Results.VariantGWAS
SET bin_index = v.bin_index, metaseq_id = v.metaseq_id, source_id = v.source_id
FROM NIAGADS.Variant v 
WHERE Results.VariantGWAS.variant_id = v.variant_id
AND variant_gwas_id BETWEEN %s AND %s
AND protocol_app_node_id = %s"""

MAX_PK_SQL = """SELECT max(variant_gwas_id) AS max,
min(variant_gwas_id) AS min
FROM Results.VariantGWAS
WHERE protocol_app_node_id = %s"""

PROTOCOL_SQL = """SELECT DISTINCT source_id,
protocol_app_node_id
FROM Study.ProtocolAppNode 
WHERE source_id LIKE 'NG%'
AND source_id != 'NG00061'
ORDER BY source_id"""


def skip_protocol(protocol):
    ''' skip might be an exact match or a list of accessions'''
    if skip is None:
        return False
    if protocol in skip:
        return True
    for a in skip: # accession
        if a in protocol:
            return True

    return False


def get_protocol_map():
    warning("Fetching protocol map.")
    cursor.execute(PROTOCOL_SQL)
    protocols = OrderedDict()
    for record in cursor:
        protocols[record['source_id']] = record['protocol_app_node_id']
    return protocols


def get_pk_range(protocolAppNodeId):
    warning("Fetching PK range for protocol app node", protocolAppNodeId)
    # warning(cursor.mogrify(MAX_PK_SQL, (protocolAppNodeId,)))
    cursor.execute(MAX_PK_SQL, (protocolAppNodeId, ))
    result = cursor.fetchone()
    return result
        

def update(protocolAppNodeId, logFileName):
    ''' perform an incremental update '''
    fh = open(logFileName, 'w', 0) if logFileName is not None else sys.stderr
    pkRange = get_pk_range(protocolAppNodeId)
    maxPK = pkRange['max']
    minPK = pkRange['min']

    if args.startWith:
        warning("Using minPK provided by --startWith option", file=fh)
        minPK = args.startWith

    increment = (maxPK - minPK) // args.increment
    remainder = (maxPK - minPK) % args.increment
    
    warning("Min PK = ", minPK, file=fh)
    warning("Max PK = ", maxPK, file=fh)
    warning("Estimated num records = ", maxPK - minPK, file=fh)
    warning("Commit after =", args.increment, file=fh)
    warning("Number iterations =", increment, file=fh)
    warning("Remainder to commit after looping =", remainder, file=fh)
    
    if args.test: 
        maxPK = (2 * args.increment) + minPK
        remainder = (maxPK - minPK) % args.increment
        warning("test maxPK = ", maxPK)
        warning("test remainder = ", remainder)

    iteration = 1
    uc = 0
    for i in range(minPK, maxPK + 1, args.increment): # +1 b/c it is a non-inclusive end
        warning(xstr(iteration) + ":", i, "-", i + args.increment, file=fh)
        cursor.execute(UPDATE_SQL, (i, i + args.increment, protocolAppNodeId))
        database.commit()
        iteration = iteration + 1
        uc = uc + args.increment
    
    if remainder:
        warning("R:", maxPK - remainder, "-", maxPK, file=fh)
        cursor.execute(UPDATE_SQL, (maxPK - remainder, maxPK, protocolAppNodeId))
        uc = uc + args.increment
        database.commit()

    if logFileName is not None:
        fh.close()

    return uc


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="update variant gwas result with ids")
    parser.add_argument('--test', action="store_true")
    parser.add_argument('--increment', type=int, default=25000)
    parser.add_argument('--protocol', help="source id, if not specified will iterate over all")
    parser.add_argument('--skip', help="comma separated list of protocols to skiip")
    parser.add_argument('--log', action="store_true")
    parser.add_argument('--logPath')
    parser.add_argument('--startWith', type=int)
    parser.add_argument('--gusConfigFile',
                        help="GUS config file. If not provided, assumes default: $GUS_HOME/conf/gus.config")
    args = parser.parse_args()

    database = Database(args.gusConfigFile)
    database.connect()
    cursor = database.cursor("RealDictCursor")

    protocol_map = get_protocol_map()

    warning("Updating", len(protocol_map), "protocols.")

    updateCount = 0

    skip = None
    if args.skip:
        skip = args.skip.split(',')

    if args.protocol:
        warning("Protocol:", args.protocol, "-", protocol_map[args.protocol])     
        updateCount = updateCount + update(protocol_map[args.protocol], None)
    else:
        for p in protocol_map:
            if skip_protocol(p):
                warning("Skipping protocol:", p, "-", protocol_map[p])
                continue
            warning("Updating protocol:", p, "-", protocol_map[p]) 
            logFile = path.join(args.logPath, "patch_variant_gwas_" + p + ".log") if args.log else None
            updateCount = updateCount + update(protocol_map[p], logFile)
            
    database.close()
