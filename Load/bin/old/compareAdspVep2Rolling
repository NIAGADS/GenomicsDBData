#!/usr/bin/env python
#pylint: disable=invalid-name

'''
find variant ids/rows in rolling annotation not in the VEP annotation
'''

from __future__ import with_statement
from __future__ import print_function

import argparse
import os.path as path
import gzip
import re

from CBILCommonDataPg.Utils.utils import warning, die

def fix_variant_id(variant):
    '''
    fix chr:posref,alt ids so they are in chr:pos:ref:alt format
    '''
    pattern = re.compile("(\d+:\d+)([A|T|C|G]),([A|T|C|G])")

    if pattern.match(variant) is not None:
        variant = pattern.match(variant).group(1) + ':' + pattern.match(variant).group(2) + ':' + pattern.match(variant).group(3)

    return variant

def extract_missing():
    '''
    compare the two files and find anything in the rolling not
    in the vep
    '''
    missingVariants = set()
    vepFileName = path.join(args.dir, args.vep)
    rollingFileName = path.join(args.dir, args.rolling)
    outputFileName = path.join(args.dir, args.output)
    vepSet = set()

    rcount = 0
    with gzip.open(vepFileName) as vep:
        next(vep) # header
        for vepLine in vep:
            vepLine = vepLine.strip()
            values = vepLine.split('\t')
            variant = fix_variant_id(values[3])
            vepSet.add(variant)
            rcount = rcount + 1
            if (rcount % 10000000 == 0):
                warning("Read", rcount, "lines.")

    with gzip.open(rollingFileName) as rolling:
        with open(outputFileName, 'w') as of:
            header = next(rolling).strip()
            print(header, file=of)

            for rollingLine in rolling:
                rollingLine = rollingLine.strip()
                values = rollingLine.split('\t')
                variant = fix_variant_id(values[3])
                rollingLine = '\t'.join(values)

                if variant not in vepSet:
                    print(variant, file=of)
                    missingVariants.add(variant)

    warning("found", len(missingVariants), "variants")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Rolling file compared to ADSP file to find missing variants")
    parser.add_argument('-d', '--dir', help="file directory", required=True)
    parser.add_argument('--rolling', help="rolling annnotation file name", required=True)
    parser.add_argument('--vep', help="vep annotation file name", required=True)
    parser.add_argument('--output', help="output file name", required=True)
    args = parser.parse_args()

    extract_missing()

