#!/usr/bin/env python 
#pylint: disable=invalid-name

'''
Generates load file from CADD download (SNVs)
Looks up database variants by chromome and uses pysam
to map against the CADD tab-indexed SNV file
'''

from __future__ import with_statement
from __future__ import print_function

import argparse
import os.path as path
import gzip
import csv
import json
import pysam

from CBILDataCommon.Util.utils import qw, xstr, warning, die
from CBILDataCommon.Util.postgres_dbi import Database

SQL = """SELECT find_variant_by_position(%s, %s)"""

def generate_load_file():
    tbxFile = path.join(args.databaseDir, "whole_genome_SNVs.tsv.gz")
    tbx = pysam.TabixFile(tbxFile)
    fileName = path.join(args.preprocessDir, "results_seqvariation_CADD_" + args.chr + ".csv")
    count = 0
    with open(fileName, 'w') as of:
        print('|'.join(fields), file=of)

        cursor = database.cursor("RealDictCursor")
        warning("Fetching chr", args.chr, "variants")
        cursor.execute(SQL, (args.chr,))
        warning("Done.  Mapping against CADD")
        if args.chr == 'M':
            args.chr = 'MT'
        for record in cursor:
            variantId = record['na_feature_id'] # record['variant_id']
            position = record['position']
            refAllele = record['ref_allele']
            altAllele = record['alt_allele']
            for match in tbx.fetch(args.chr, position - 1, position, parser=pysam.asTuple()):
                matchRef = match[2]
                matchAlt = match[3]
                if matchRef == refAllele and matchAlt == altAllele:
                    evidence = {'CADD_raw_score': match[4], 'CADD_phred': match[5]}
                    print('|'.join((xstr(variantId), json.dumps(evidence))), file=of)
                    break # no need to look for more matches
            
            count = count + 1
            if count % 1000000 == 0:
                warning("Processed" + xstr(count) + " rows for chr" + args.chr)

        cursor.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="generate CADD load file for the specified chromosome")
    parser.add_argument('-p', '--preprocessDir', help="output file directory", required=True)
    parser.add_argument('-d', '--databaseDir', help="directory containg CADD database +tabindex files", required=True)
    parser.add_argument('-c', '--chr', help="chromosome", required=True)
    parser.add_argument('--gusConfigFile',
                        help="GUS config file. If not provided, assumes default: $GUS_HOME/conf/gus.config")
    args = parser.parse_args()

    database = Database(args.gusConfigFile)
    database.connect()

    fields = qw('na_feature_id evidence')
    generate_load_file()
    database.close()
