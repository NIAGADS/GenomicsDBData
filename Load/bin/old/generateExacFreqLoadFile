#!/usr/bin/env python
#pylint: disable=invalid-name
'''
Generates load file for frequency data from info field of ExAC VCF
'''

from __future__ import with_statement
from __future__ import print_function

import argparse
import os.path as path
import vcf

from GenomicsDBData.Util.utils import qw, xstr, warning
from GenomicsDBData.Util.postgres_dbi import Database


VARIANT_MATCH_SQL="""
	SELECT variant_id FROM NIAGADS.Variant WHERE metaseq_id = %s
"""


VARIANT_POS_MATCH_SQL="""
	SELECT v.variant_id, ref_allele, alt_allele
	FROM NIAGADS.Variant v 
	WHERE bin_index = (SELECT find_bin_index(%s, %s, %s)) AND POSITION = %s
"""


def generate_file_names():
    ''' 
    create hash of file names, one per population
    '''
    files = {}
    for p in populations:
        files[p] = path.join(args.outputDir, 'preprocess_ExAC_Freq_' + p + '.txt')
        warning("Created", files[p])
    return files


def print_headers(files):
    '''
    print file headers
    '''
    fields = qw('variant_id allele frequency')
    for fname in files.itervalues():
        with open(fname, 'w') as of:
            print('|'.join(fields), file=of)


def get_variant_by_position(chrom, pos, ref):
    ''' match to position '''
    cursor.execute(VARIANT_POS_MATCH_SQL, ('chr' + xstr(chrom), pos, pos, pos))
    variants = []
    posVariants = []
    for record in cursor: 
        posVariants.append(record['variant_id']) # backup match
        if record['ref_allele'] == ref: # ideal match
            variants.append(record['variant_id'])

    if variants:
        return variants

    warning("Unable to map to position/ref:", xstr(chrom) + ":" + xstr(pos) + ":" + ref + ".", "Mapping to position.")
    if posVariants:
        return posVariants
    
    return None


def get_matched_variant(metaseqId):
    ''' match exactly '''
    cursor.execute(VARIANT_MATCH_SQL, (metaseqId,))
    variants = []
    for record in cursor:
        variants.append(record['variant_id'])

    if not variants:
        chrom, pos, ref, alt = metaseqId.split(':')
        if len(alt) > 300:
            warning("Unable to match metaseq_id; alt allele > 300 characters.")
            return None

        warning("Unable to match metaseq_id:", metaseqId + ".", "Looking up position & reference allele.")
        return get_variant_by_position(chrom, pos, ref)

    return variants


def parseValue(value):
    '''
    replace null strings with None
    '''
    if value == '-':
        return None
    if value == 'NULL':
        return None
    if value is None:
        return None
    warning(value)
    return float(value)


def generate_load_files():
    '''
    parse input file and generate load file
    '''
    files = generate_file_names()
    print_headers(files)

    count = 0
    reader = vcf.Reader(open(args.inputFile, 'r')) # should detect if gzipped
    for record in reader:
        info = record.INFO
        for p in populations:
          
            ac = info['AC_' + p] if 'AC_' + p in info else None
            an = info['AN_' + p] if 'AN_' + p in info else None

            if ac and an:
                for index, altAllele in enumerate(record.ALT): # allele counts in same order as alt alleles
                    frequency = float(ac[index]) / float(an)
                    if frequency != 0.0:
                        metaseqId = xstr(record.CHROM) + ':' + xstr(record.POS) + ':' + xstr(record.REF) + ':' + xstr(altAllele)
                        variants = get_matched_variant(metaseqId)

                        if variants is not None:
                            with open(files[p], 'a') as of:
                                for variantId in variants:
                                    print('|'.join((xstr(variantId), xstr(altAllele), xstr(frequency))), file=of)
                                
        count = count + 1
        if count % 50000 == 0:
            warning("Processed " + xstr(count) + " rows")

# AC=3;AC_AFR=0;AC_AMR=0;AC_Adj=2;AC_EAS=0;AC_FIN=0;AC_Het=0;AC_Hom=1;AC_NFE=0;AC_OTH=0;AC_SAS=2;AF=6.998e-05;AN=42870;AN_AFR=770;AN_AMR=134;AN_Adj=8432;AN_EAS=254;AN_FIN=16;AN_NFE=2116;AN_OTH=90;AN_SAS=5052;BaseQRankSum=0.727;ClippingRankSum=1.15;DP=139843;FS=0.000;GQ_MEAN=12.48;GQ_STDDEV=15.18;Het_AFR=0;Het_AMR=0;Het_EAS=0;Het_FIN=0;Het_NFE=0;Het_OTH=0;Het_SAS=0;Hom_AFR=0;Hom_AMR=0;Hom_EAS=0;Hom_FIN=0;Hom_NFE=0;Hom_OTH=0;Hom_SAS=1;InbreedingCoeff=-0.0844;MQ=35.72;MQ0=0;MQRankSum=0.727;NCC=60853;QD=23.42;ReadPosRankSum=0.727;VQSLOD=-1.687e+00;culprit=MQ;DP_HIST=14728|2455|2120|518|121|499|534|314|111|21|10|2|2|0|0|0|0|0|0|0,1|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0;GQ_HIST=1012|14971|172|100|3161|259|127|30|8|9|5|16|1162|274|59|45|17|2|3|3,0|0|0|0|0|1|0|0|0|0|0|0|0|1|0|0|0|0|0|0;


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="generate ExAC Frequency load file from ExAC VCF")
    parser.add_argument('-i', '--inputFile', help="full path to vcf file (can be gzipped)", required=True)
    parser.add_argument('-o', '--outputDir', help="file directory", required=True)
    parser.add_argument('-p', '--populations',
                        help="comma separated list of one or more ExAC population, one of: SAS,FIN,AFR,AMR,EAS,OTH,NFE,Adj",
                        required=True)
    parser.add_argument('--gusConfigFile',
                        help="GUS config file. If not provided, assumes default: $GUS_HOME/conf/gus.config")
    args = parser.parse_args()

    populations = args.populations.split(',')

    database = Database(args.gusConfigFile)
    database.connect()
    cursor = database.cursor("RealDictCursor")

    generate_load_files()

    cursor.close()
    database.close()
