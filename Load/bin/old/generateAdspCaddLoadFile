#!/usr/bin/env python 
#pylint: disable=invalid-name
'''
Generates load file from ADSP annotation for CADD
'''

from __future__ import with_statement
from __future__ import print_function

import argparse
import os.path as path
import gzip
import csv
import re
import json

from CBILDataCommon.Util.utils import qw, xstr, warning, die

def parseValue(value):
    '''
    replace null strings with None
    '''
    if value == '-':
        return None
    if value == 'NULL':
        return None
    return xstr(value)


def verify_variant_id(variant):
    '''
    fix variant id if malformed
    '''

    if pattern.match(variant) is not None:
        variant = pattern.match(variant).group(1) + ':' + pattern.match(variant).group(2) \
          + ':' + pattern.match(variant).group(3)
    return variant


def generate_load_file():
    '''
    parse input file and generate load file
    '''

    outputFile = path.join(args.preprocessDir, "results_seqvariation_adsp_CADD.csv")
    variants = {}
    with open(outputFile, 'w') as of:
        print('|'.join(fields), file=of)
        for fn in files:
            count = 0
            fileName = path.join(args.dir, fn)
            with gzip.open(fileName) as f:
                reader = csv.DictReader(f, delimiter='\t')
                for row in reader:
                    count = count + 1
                    if count % 1000000 == 0:
                        warning("Processed " + xstr(count) + " rows (" + fn + ")")

                    variantId = verify_variant_id(row['seq_meta_var_id'])
                    if variantId in variants: # skip duplicates
                        continue

                    raw = parseValue(row['CADD_raw_score'])
                    phred = parseValue(row['CADD_phred'])
                    if raw is not None:
                        evidence = {'CADD_raw_score': raw, 'CADD_phred': phred}
                        print('|'.join((variantId, json.dumps(evidence))), file=of)
                        variants[variantId] = 1

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="generate ADSP-CADD load file")
    parser.add_argument('-d', '--dir', help="file directory", required=True)
    parser.add_argument('-p', '--preprocessDir', help="preprocess (output) file directory", required=True)
    parser.add_argument('-f', '--fileName', help="comma separated list of adsp annotation file name", required=True)
    # parser.add_argument('-s', '--subset', help="adsp subset", required=True)
    args = parser.parse_args()

    files = args.fileName.split(',')
    pattern = re.compile("(\d+:\d+)([A|T|C|G]),([A|T|C|G])") # only want to do this once

    score = qw('CADD_raw_score	CADD_phred')
    fields = qw('variant_id evidence')
    generate_load_file()
