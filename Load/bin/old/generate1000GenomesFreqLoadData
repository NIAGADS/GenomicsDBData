#!/usr/bin/env python
#pylint: disable=invalid-name
#pylint: disable=no-member
'''
generates 1000 Genomes frequency load file
'''

from __future__ import with_statement
from __future__ import print_function

import argparse
import csv
import gzip
from os import listdir, path
from CBILCommonDataPg.Utils.utils import qw, xstr, warning, die


def extract_frequency(infoStr, population):
    '''
    extract frequency for given population from info string
    '''
    # warninng(infoStr)

    infoTags = dict(item.split('=') for item in infoStr.split(';')  if '=' in item)

    tag = population + '_AF' if population != 'AF' else 'AF'

    if tag in infoTags:
        return infoTags[tag]
    else:
        return None
    

def generate_file_names():
    ''' 
    create hash of file names, one per population
    '''
    files = {}
    for p in populations:
        files[p] = path.join(args.outputDir, 'niagads_variantallelefrequency_1000GenomesFreq_' + p + '.csv')
        warning("Created", files[p])
    return files


def print_headers(files):
    '''
    print file headers
    '''
    for fname in files.itervalues():
        with open(fname, 'a') as of:
            print('|'.join(fields), file=of)


def generate_load_file():
    '''
    parse input file and generate load file
    '''

    files = generate_file_names()
    print_headers(files)

    count = 0
    skipCount = 0
    for filename in listdir(args.dir):
        if filename.endswith(".gz"):
            warning("Processing:", filename)
            with gzip.open(path.join(args.dir, filename)) as f:
                reader = csv.DictReader((row for row in f if not row.startswith('##')), delimiter='\t')
                for row in reader:
                    chromosome = row['#CHROM']
                    if chromosome == 'MT':
                        chromosome = 'M'

                    if '<' in row['ALT']:
                        skipCount = skipCount + 1
                        continue # not an interpretable variant at this time

                    alleles = row['ALT'].split(',') # multi-alleleic

                    for p in populations:
                        freq = extract_frequency(row['INFO'], p)
                        if freq is not None:
                            freq = freq.split(',')
                            for index, alt in enumerate(alleles):
                                alleleFreq = freq[index]
                                if alleleFreq == "0":
                                    continue
                                variantId = chromosome + ':' + row['POS'] + ':' + row['REF'] + ':' + alt
                                with open(files[p], 'a') as of:
                                    print('|'.join((variantId, alt, alleleFreq)), file=of)

                    count = count + 1
                    if count % 1000000 == 0:
                        warning("Processed " + xstr(count) + " rows")

    warning("Processed " + xstr(count) + " rows")
    warning("Skipped " + xstr(skipCount) + " rows")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="generate 1000 Genomes Frequency load file")
    parser.add_argument('-d', '--dir', help="file directory", required=True)
    parser.add_argument('-o', '--outputDir', help="preprocess dir", required=True);
    # parser.add_argument('-r', '--resume')
    parser.add_argument('-p', '--populations', required=True)
    args = parser.parse_args()

    populations = args.populations.split(',')

    fields = qw('variant_id allele frequency')


    generate_load_file()
