#!/usr/bin/env python 
#pylint: disable=invalid-name

'''
Generates load file from PLINK LD output
'''

from __future__ import with_statement
from __future__ import print_function

import argparse
import os.path as path
from os import listdir
import gzip
import datetime
import csv
import threading
from concurrent.futures import ThreadPoolExecutor

from GenomicsDBData.Util.utils import qw, xstr, warning, die, verify_path, create_dir, execute_cmd

CHROMOSOMES = qw('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X Y MT');

def generate_samples():
    ''' extract samples from 1000 genomes '''

    cmd = ['extract1000GenomesPopSamples', '--file', args.sampleFile, '-d', outputDir, '-p', args.population]
    warning(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'), "Executing:", ' '.join(cmd))
    execute_cmd(cmd, verbose=False)


def run_ld(chrm):
    """ run ld """

    tped = path.join(args.chrDirectory, 'chr' + xstr(chrm) + '.tped')
    tfam = path.join(args.chrDirectory, 'chr' + xstr(chrm) + '.tfam')
    samples = path.join(outputDir, args.population + '-samples.txt')
    outputFile = path.join(outputDir, 'chr' + xstr(chrm))
    cmd = ['plink', '--threads', xstr(1), '--memory', xstr(4500), '--tped', tped, '--tfam', tfam, '--keep', samples,
            '--r2', 'dprime', 'with-freqs', 'gz', '--ld-window', xstr(9999), '--out', outputFile]
    warning(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'), "Executing:", ' '.join(cmd))
    execute_cmd(cmd, verbose=False)
    
    return 1


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="calculate LD load file")
    parser.add_argument('-p', '--population', help="population", required=True)
    parser.add_argument('-d', '--rootDirectory', help="root directory where pop directory should be created", required=True)
    parser.add_argument('-c', '--chrDirectory', help="directory for chromosomes", required=True)
    parser.add_argument('-s', '--sampleFile', help="full path to sample file", required=True)
    parser.add_argument('-m', '--maxWorkers', type=int, help="full path to sample file", default=5)
    parser.add_argument('--gusConfigFile',
                        help="GUS config file. If not provided, assumes default: $GUS_HOME/conf/gus.config")
    args = parser.parse_args()

    outputDir = create_dir(path.join(args.rootDirectory, args.population))

    generate_samples();

    with ThreadPoolExecutor(max_workers=5) as executor:
        for c in CHROMOSOMES:
            warning("Create and start thread for chromosome:", xstr(c))
            executor.submit(run_ld, c)
